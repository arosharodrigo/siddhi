// Generated by JavaCPP version 0.9


#ifdef __APPLE__
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif
#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif
#include <jni.h>
#ifdef ANDROID
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif
#if defined(ANDROID) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline))
    #define JavaCPP_hidden   __attribute__((visibility("hidden")))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif

#include <CudaEvent.h>
#include <Filter.h>
#include <GpuEventConsumer.h>
#include <CudaKernelBase.h>
#include <CudaFilterKernel.h>
#include <CudaSingleFilterKernel.h>

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[29] = {
        "org/bytedeco/javacpp/Pointer",
        "org/bytedeco/javacpp/Loader",
        "java/lang/Object",
        "java/lang/NullPointerException",
        "org/bytedeco/javacpp/BytePointer",
        "org/bytedeco/javacpp/ShortPointer",
        "org/bytedeco/javacpp/IntPointer",
        "org/bytedeco/javacpp/LongPointer",
        "org/bytedeco/javacpp/FloatPointer",
        "org/bytedeco/javacpp/DoublePointer",
        "org/bytedeco/javacpp/CharPointer",
        "org/bytedeco/javacpp/PointerPointer",
        "org/bytedeco/javacpp/BoolPointer",
        "org/bytedeco/javacpp/CLongPointer",
        "org/bytedeco/javacpp/SizeTPointer",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$CudaSingleFilterKernel",
        "java/lang/RuntimeException",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$SingleFilterKernelInput",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$CudaEvent",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$Filter",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$CudaFilterKernel",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$MultipleFilterKernelInput",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$GpuEventConsumer",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$ExecutorNode",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$ConstValue",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$VariableValue",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$Values",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$AttibuteValue",
        "org/wso2/siddhi/gpu/jni/SiddhiGpu$DataType" };
static jclass JavaCPP_classes[29] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef ANDROID
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
#endif
    va_end(ap);
}

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "()V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting default constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, int size, void (*deallocator)(void*)) {
    if (deallocator != NULL) {
        jvalue args[3];
        args[0].j = ptr_to_jlong(ptr);
        args[1].i = size;
        args[2].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetIntField(obj, JavaCPP_limitFID, size);
        env->SetIntField(obj, JavaCPP_capacityFID, size);
    }
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (std::exception& e) {
        str = env->NewStringUTF(e.what());
    } catch (...) {
        str = env->NewStringUTF("Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

#include <vector>
template<typename P, typename T = P> class JavaCPP_hidden VectorAdapter {
public:
    VectorAdapter(const P* ptr, typename std::vector<T>::size_type size) : ptr((P*)ptr), size(size),
        vec2(ptr ? std::vector<T>((P*)ptr, (P*)ptr + size) : std::vector<T>()), vec(vec2) { }
    VectorAdapter(const std::vector<T>& vec) : ptr(0), size(0), vec2(vec), vec(vec2) { }
    VectorAdapter(      std::vector<T>& vec) : ptr(0), size(0), vec(vec) { }
    void assign(P* ptr, typename std::vector<T>::size_type size) {
        this->ptr = ptr;
        this->size = size;
        vec.assign(ptr, ptr + size);
    }
    static void deallocate(void* ptr) { delete[] (P*)ptr; }
    operator P*() {
        if (vec.size() > size) {
            ptr = new (std::nothrow) P[vec.size()];
        }
        if (ptr) {
            std::copy(vec.begin(), vec.end(), ptr);
        }
        size = vec.size();
        return ptr;
    }
    operator const P*()        { return &vec[0]; }
    operator std::vector<T>&() { return vec; }
    operator std::vector<T>*() { return ptr ? &vec : 0; }
    P* ptr;
    typename std::vector<T>::size_type size;
    std::vector<T> vec2;
    std::vector<T>& vec;
};

#include <string>
class JavaCPP_hidden StringAdapter {
public:
    StringAdapter(const          char* ptr, size_t size) : ptr((char*)ptr), size(size),
        str2(ptr ? (char*)ptr : ""), str(str2) { }
    StringAdapter(const signed   char* ptr, size_t size) : ptr((char*)ptr), size(size),
        str2(ptr ? (char*)ptr : ""), str(str2) { }
    StringAdapter(const unsigned char* ptr, size_t size) : ptr((char*)ptr), size(size),
        str2(ptr ? (char*)ptr : ""), str(str2) { }
    StringAdapter(const std::string& str) : ptr(0), size(0), str2(str), str(str2) { }
    StringAdapter(      std::string& str) : ptr(0), size(0), str(str) { }
    void assign(char* ptr, size_t size) {
        this->ptr = ptr;
        this->size = size;
        str.assign(ptr ? ptr : "");
    }
    static void deallocate(void* ptr) { free(ptr); }
    operator char*() {
        const char* c_str = str.c_str();
        if (ptr == NULL || strcmp(c_str, ptr) != 0) {
            ptr = strdup(c_str);
        }
        size = strlen(c_str) + 1;
        return ptr;
    }
    operator       signed   char*() { return (signed   char*)(operator char*)(); }
    operator       unsigned char*() { return (unsigned char*)(operator char*)(); }
    operator const          char*() { return                 str.c_str(); }
    operator const signed   char*() { return (signed   char*)str.c_str(); }
    operator const unsigned char*() { return (unsigned char*)str.c_str(); }
    operator         std::string&() { return str; }
    operator         std::string*() { return ptr ? &str : 0; }
    char* ptr;
    size_t size;
    std::string str2;
    std::string& str;
};



static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_deallocate(void *p) { delete (::SiddhiGpu::CudaSingleFilterKernel*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_deallocate(void *p) { delete (::SiddhiGpu::SingleFilterKernelInput*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_deallocate(void *p) { delete (::SiddhiGpu::CudaFilterKernel*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_deallocate(void *p) { delete (::SiddhiGpu::MultipleFilterKernelInput*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_deallocate(void *p) { delete (::SiddhiGpu::GpuEventConsumer*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_deallocate(void *p) { delete (::SiddhiGpu::Filter*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_deallocate(void *p) { delete (::SiddhiGpu::ExecutorNode*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_deallocate(void *p) { delete (::SiddhiGpu::ConstValue*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_deallocate(void *p) { delete (::SiddhiGpu::VariableValue*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_deallocate(void *p) { delete (::SiddhiGpu::CudaEvent*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_deallocate(void *p) { delete (::SiddhiGpu::AttibuteValue*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_deallocate(void *p) { delete (::SiddhiGpu::Values*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_deallocate(void *p) { delete (::SiddhiGpu::DataType*)p; }
static void JavaCPP_org_bytedeco_javacpp_BytePointer_deallocateArray(void* p) { delete[] (signed char*)p; }
static void JavaCPP_org_bytedeco_javacpp_ShortPointer_deallocateArray(void* p) { delete[] (short*)p; }
static void JavaCPP_org_bytedeco_javacpp_IntPointer_deallocateArray(void* p) { delete[] (int*)p; }
static void JavaCPP_org_bytedeco_javacpp_LongPointer_deallocateArray(void* p) { delete[] (jlong*)p; }
static void JavaCPP_org_bytedeco_javacpp_FloatPointer_deallocateArray(void* p) { delete[] (float*)p; }
static void JavaCPP_org_bytedeco_javacpp_DoublePointer_deallocateArray(void* p) { delete[] (double*)p; }
static void JavaCPP_org_bytedeco_javacpp_CharPointer_deallocateArray(void* p) { delete[] (unsigned short*)p; }
static void JavaCPP_org_bytedeco_javacpp_PointerPointer_deallocateArray(void* p) { delete[] (void**)p; }
static void JavaCPP_org_bytedeco_javacpp_BoolPointer_deallocateArray(void* p) { delete[] (bool*)p; }
static void JavaCPP_org_bytedeco_javacpp_CLongPointer_deallocateArray(void* p) { delete[] (long*)p; }
static void JavaCPP_org_bytedeco_javacpp_SizeTPointer_deallocateArray(void* p) { delete[] (size_t*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_deallocateArray(void* p) { delete[] (::SiddhiGpu::SingleFilterKernelInput*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_deallocateArray(void* p) { delete[] (::SiddhiGpu::MultipleFilterKernelInput*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_deallocateArray(void* p) { delete[] (::SiddhiGpu::ExecutorNode*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_deallocateArray(void* p) { delete[] (::SiddhiGpu::ConstValue*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_deallocateArray(void* p) { delete[] (::SiddhiGpu::VariableValue*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_deallocateArray(void* p) { delete[] (::SiddhiGpu::CudaEvent*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_deallocateArray(void* p) { delete[] (::SiddhiGpu::AttibuteValue*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_deallocateArray(void* p) { delete[] (::SiddhiGpu::Values*)p; }
static void JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_deallocateArray(void* p) { delete[] (::SiddhiGpu::DataType*)p; }

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    const char* members[29][8] = {
            { "sizeof" },
            {  },
            {  },
            {  },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            {  },
            { "sizeof", "ap_EventBuffer", "i_EventCount", "i_MaxEventCount", "ap_Filter", "i_EventsPerBlock" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof", "ap_Filters", "ap_EventBuffer", "i_EventCount", "i_FilterCount", "i_MaxEventCount" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof", "z_ExtString", "b_BoolVal", "i_IntVal", "l_LongVal", "f_FloatVal", "d_DoubleVal", "z_StringVal" },
            { "sizeof", "m_Value", "e_Type" },
            { "sizeof" } };
    int offsets[29][8] = {
            { sizeof(void*) },
            {  },
            {  },
            {  },
            { sizeof(signed char) },
            { sizeof(short) },
            { sizeof(int) },
            { sizeof(jlong) },
            { sizeof(float) },
            { sizeof(double) },
            { sizeof(unsigned short) },
            { sizeof(void*) },
            { sizeof(bool) },
            { sizeof(long) },
            { sizeof(size_t) },
            { sizeof(::SiddhiGpu::CudaSingleFilterKernel) },
            {  },
            { sizeof(::SiddhiGpu::SingleFilterKernelInput), offsetof(::SiddhiGpu::SingleFilterKernelInput, ap_EventBuffer), offsetof(::SiddhiGpu::SingleFilterKernelInput, i_EventCount), offsetof(::SiddhiGpu::SingleFilterKernelInput, i_MaxEventCount), offsetof(::SiddhiGpu::SingleFilterKernelInput, ap_Filter), offsetof(::SiddhiGpu::SingleFilterKernelInput, i_EventsPerBlock) },
            { sizeof(::SiddhiGpu::CudaEvent) },
            { sizeof(::SiddhiGpu::Filter) },
            { sizeof(::SiddhiGpu::CudaFilterKernel) },
            { sizeof(::SiddhiGpu::MultipleFilterKernelInput), offsetof(::SiddhiGpu::MultipleFilterKernelInput, ap_Filters), offsetof(::SiddhiGpu::MultipleFilterKernelInput, ap_EventBuffer), offsetof(::SiddhiGpu::MultipleFilterKernelInput, i_EventCount), offsetof(::SiddhiGpu::MultipleFilterKernelInput, i_FilterCount), offsetof(::SiddhiGpu::MultipleFilterKernelInput, i_MaxEventCount) },
            { sizeof(::SiddhiGpu::GpuEventConsumer) },
            { sizeof(::SiddhiGpu::ExecutorNode) },
            { sizeof(::SiddhiGpu::ConstValue) },
            { sizeof(::SiddhiGpu::VariableValue) },
            { sizeof(::SiddhiGpu::Values), offsetof(::SiddhiGpu::Values, z_ExtString), offsetof(::SiddhiGpu::Values, b_BoolVal), offsetof(::SiddhiGpu::Values, i_IntVal), offsetof(::SiddhiGpu::Values, l_LongVal), offsetof(::SiddhiGpu::Values, f_FloatVal), offsetof(::SiddhiGpu::Values, d_DoubleVal), offsetof(::SiddhiGpu::Values, z_StringVal) },
            { sizeof(::SiddhiGpu::AttibuteValue), offsetof(::SiddhiGpu::AttibuteValue, m_Value), offsetof(::SiddhiGpu::AttibuteValue, e_Type) },
            { sizeof(::SiddhiGpu::DataType) } };
    int memberOffsetSizes[29] = { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 6, 1, 1, 1, 6, 1, 1, 1, 1, 8, 3, 1 };
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 1, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)V");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 29 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(2) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = env->NewStringUTF(members[i][j]);
                args[2].i = offsets[i][j];
                env->CallStaticVoidMethodA(JavaCPP_getClass(env, 1), putMemberOffsetMID, args);
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "I");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "I");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "I");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JIJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 2, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 29; i++) {
        env->DeleteWeakGlobalRef(JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JavaCPP_vm = NULL;
}


JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_Pointer_00024NativeDeallocator_deallocate(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    void* allocatedAddress = jlong_to_ptr(arg0);
    void (*deallocatorAddress)(void*) = (void(*)(void*))jlong_to_ptr(arg1);
    if (deallocatorAddress != NULL && allocatedAddress != NULL) {
        (*deallocatorAddress)(allocatedAddress);
    }

}



JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_Pointer_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)env->GetDirectBufferAddress(arg0);
    void* rptr = ptr0;
    jint rcapacity = 1;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, NULL);
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_asDirectBuffer(JNIEnv* env, jobject obj) {
    char* ptr = (char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint size = env->GetIntField(obj, JavaCPP_limitFID);
    size -= position;
    jobject rarg = NULL;
    char* rptr;
    rptr = ptr;
    jint rcapacity = size;
    if (rptr != NULL) {
        rarg = env->NewDirectByteBuffer((void*)rptr, rcapacity);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memchr(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    void* rptr;
    rptr = memchr(ptr0, arg1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_Pointer_memcmp(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = memcmp(ptr0, ptr1, arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memcpy(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    void* rptr;
    rptr = memcpy(ptr0, ptr1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr == ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memmove(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    void* rptr;
    rptr = memmove(ptr0, ptr1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr == ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memset(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    void* rptr;
    rptr = memset(ptr0, arg1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_get___3BII(JNIEnv* env, jobject obj, jbyteArray arg0, jint arg1, jint arg2) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (jbyte*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_bytedeco_javacpp_BytePointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    signed char rvalue = ptr[arg0];
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_put___3BII(JNIEnv* env, jobject obj, jbyteArray arg0, jint arg1, jint arg2) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (jbyte*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_put__IB(JNIEnv* env, jobject obj, jint arg0, jbyte arg1) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_BytePointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 4))) {
        return;
    }
    signed char* rptr = new (std::nothrow) signed char[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_BytePointer_deallocateArray);
}

JNIEXPORT jshort JNICALL Java_org_bytedeco_javacpp_ShortPointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    short rvalue = ptr[arg0];
    rarg = (jshort)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_ShortPointer_get___3SII(JNIEnv* env, jobject obj, jshortArray arg0, jint arg1, jint arg2) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    short* ptr0 = arg0 == NULL ? NULL : (jshort*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_ShortPointer_put__IS(JNIEnv* env, jobject obj, jint arg0, jshort arg1) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_ShortPointer_put___3SII(JNIEnv* env, jobject obj, jshortArray arg0, jint arg1, jint arg2) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    short* ptr0 = arg0 == NULL ? NULL : (jshort*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_ShortPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 5))) {
        return;
    }
    short* rptr = new (std::nothrow) short[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_ShortPointer_deallocateArray);
}

JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_IntPointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr[arg0];
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_IntPointer_get___3III(JNIEnv* env, jobject obj, jintArray arg0, jint arg1, jint arg2) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (jint*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_IntPointer_put___3III(JNIEnv* env, jobject obj, jintArray arg0, jint arg1, jint arg2) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (jint*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_IntPointer_put__II(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_IntPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 6))) {
        return;
    }
    int* rptr = new (std::nothrow) int[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_IntPointer_deallocateArray);
}

JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_LongPointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jlong rvalue = ptr[arg0];
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_LongPointer_get___3JII(JNIEnv* env, jobject obj, jlongArray arg0, jint arg1, jint arg2) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_LongPointer_put__IJ(JNIEnv* env, jobject obj, jint arg0, jlong arg1) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_LongPointer_put___3JII(JNIEnv* env, jobject obj, jlongArray arg0, jint arg1, jint arg2) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_LongPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 7))) {
        return;
    }
    jlong* rptr = new (std::nothrow) jlong[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_LongPointer_deallocateArray);
}

JNIEXPORT jfloat JNICALL Java_org_bytedeco_javacpp_FloatPointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    float rvalue = ptr[arg0];
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_FloatPointer_get___3FII(JNIEnv* env, jobject obj, jfloatArray arg0, jint arg1, jint arg2) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    float* ptr0 = arg0 == NULL ? NULL : (jfloat*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_FloatPointer_put__IF(JNIEnv* env, jobject obj, jint arg0, jfloat arg1) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_FloatPointer_put___3FII(JNIEnv* env, jobject obj, jfloatArray arg0, jint arg1, jint arg2) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    float* ptr0 = arg0 == NULL ? NULL : (jfloat*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_FloatPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 8))) {
        return;
    }
    float* rptr = new (std::nothrow) float[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_FloatPointer_deallocateArray);
}

JNIEXPORT jdouble JNICALL Java_org_bytedeco_javacpp_DoublePointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jdouble rarg = 0;
    double rvalue = ptr[arg0];
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_DoublePointer_get___3DII(JNIEnv* env, jobject obj, jdoubleArray arg0, jint arg1, jint arg2) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    double* ptr0 = arg0 == NULL ? NULL : (jdouble*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_DoublePointer_put__ID(JNIEnv* env, jobject obj, jint arg0, jdouble arg1) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_DoublePointer_put___3DII(JNIEnv* env, jobject obj, jdoubleArray arg0, jint arg1, jint arg2) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    double* ptr0 = arg0 == NULL ? NULL : (jdouble*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_DoublePointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 9))) {
        return;
    }
    double* rptr = new (std::nothrow) double[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_DoublePointer_deallocateArray);
}

JNIEXPORT jchar JNICALL Java_org_bytedeco_javacpp_CharPointer_get__I(JNIEnv* env, jobject obj, jint arg0) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jchar rarg = 0;
    unsigned short rvalue = ptr[arg0];
    rarg = (jchar)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CharPointer_get___3CII(JNIEnv* env, jobject obj, jcharArray arg0, jint arg1, jint arg2) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    unsigned short* ptr0 = arg0 == NULL ? NULL : (jchar*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CharPointer_put___3CII(JNIEnv* env, jobject obj, jcharArray arg0, jint arg1, jint arg2) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    unsigned short* ptr0 = arg0 == NULL ? NULL : (jchar*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CharPointer_put__IC(JNIEnv* env, jobject obj, jint arg0, jchar arg1) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_CharPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 10))) {
        return;
    }
    unsigned short* rptr = new (std::nothrow) unsigned short[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_CharPointer_deallocateArray);
}

JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_PointerPointer_get(JNIEnv* env, jobject obj, jclass arg0, jint arg1) {
    void** ptr = (void**)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    rptr = ptr[arg1];
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0, arg0);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_PointerPointer_put(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    void** ptr = (void**)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    ptr[arg0] = ptr1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_PointerPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 11))) {
        return;
    }
    void** rptr = new (std::nothrow) void*[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_PointerPointer_deallocateArray);
}

JNIEXPORT jboolean JNICALL Java_org_bytedeco_javacpp_BoolPointer_get(JNIEnv* env, jobject obj, jint arg0) {
    bool* ptr = (bool*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rvalue = (bool)ptr[arg0];
    rarg = (jboolean)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BoolPointer_put(JNIEnv* env, jobject obj, jint arg0, jboolean arg1) {
    bool* ptr = (bool*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = (bool)arg1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_BoolPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 12))) {
        return;
    }
    bool* rptr = new (std::nothrow) bool[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_BoolPointer_deallocateArray);
}

JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_CLongPointer_get(JNIEnv* env, jobject obj, jint arg0) {
    long* ptr = (long*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    long rvalue = (long)ptr[arg0];
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CLongPointer_put(JNIEnv* env, jobject obj, jint arg0, jlong arg1) {
    long* ptr = (long*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = (long)arg1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_CLongPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 13))) {
        return;
    }
    long* rptr = new (std::nothrow) long[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_CLongPointer_deallocateArray);
}

JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_SizeTPointer_get(JNIEnv* env, jobject obj, jint arg0) {
    size_t* ptr = (size_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr[arg0];
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_SizeTPointer_put(JNIEnv* env, jobject obj, jint arg0, jlong arg1) {
    size_t* ptr = (size_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = (size_t)arg1;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_SizeTPointer_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 14))) {
        return;
    }
    size_t* rptr = new (std::nothrow) size_t[arg0];
    jint rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_bytedeco_javacpp_SizeTPointer_deallocateArray);
}


JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_allocate__ILorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_2Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1, jobject arg2) {
    ::SiddhiGpu::GpuEventConsumer* ptr1 = arg1 == NULL ? NULL : (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    char* ptr2 = arg2 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jint position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 15))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaSingleFilterKernel* rptr = new ::SiddhiGpu::CudaSingleFilterKernel(arg0, ptr1, (FILE*)ptr2);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_allocate__IILorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_2Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jint arg0, jint arg1, jobject arg2, jobject arg3) {
    ::SiddhiGpu::GpuEventConsumer* ptr2 = arg2 == NULL ? NULL : (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jint position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jint position3 = arg3 == NULL ? 0 : env->GetIntField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 15))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaSingleFilterKernel* rptr = new ::SiddhiGpu::CudaSingleFilterKernel(arg0, arg1, ptr2, (FILE*)ptr3);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_Initialize(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Initialize();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_ProcessEvents(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->ProcessEvents();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_AddEvent(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddEvent((const ::SiddhiGpu::CudaEvent*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_AddAndProcessEvents__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddAndProcessEvents((arg0 == NULL ? NULL : &ptr0), arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    ptr0 -= position0;
    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_AddAndProcessEvents__Lorg_bytedeco_javacpp_PointerPointer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    void** ptr0 = arg0 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddAndProcessEvents((SiddhiGpu::CudaEvent**)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_AddFilterToDevice(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Filter* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddFilterToDevice(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_CopyFiltersToDevice(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->CopyFiltersToDevice();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaSingleFilterKernel_GetElapsedTimeAverage(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaSingleFilterKernel* ptr = (::SiddhiGpu::CudaSingleFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->GetElapsedTimeAverage();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 17))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::SingleFilterKernelInput* rptr = new ::SiddhiGpu::SingleFilterKernelInput();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 17))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::SingleFilterKernelInput* rptr = new ::SiddhiGpu::SingleFilterKernelInput[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_ap_1EventBuffer__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->ap_EventBuffer = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_ap_1EventBuffer__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::CudaEvent* rptr;
    rptr = ptr->ap_EventBuffer;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 18);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_i_1EventCount__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_EventCount = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_i_1EventCount__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_EventCount;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_i_1MaxEventCount__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_MaxEventCount = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_i_1MaxEventCount__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_MaxEventCount;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_ap_1Filter__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Filter* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->ap_Filter = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_ap_1Filter__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::Filter* rptr;
    rptr = ptr->ap_Filter;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 19);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_i_1EventsPerBlock__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_EventsPerBlock = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024SingleFilterKernelInput_i_1EventsPerBlock__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::SingleFilterKernelInput* ptr = (::SiddhiGpu::SingleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_EventsPerBlock;
    rarg = (jint)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_allocate(JNIEnv* env, jobject obj, jint arg0, jobject arg1, jobject arg2) {
    ::SiddhiGpu::GpuEventConsumer* ptr1 = arg1 == NULL ? NULL : (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    char* ptr2 = arg2 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jint position2 = arg2 == NULL ? 0 : env->GetIntField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 20))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaFilterKernel* rptr = new ::SiddhiGpu::CudaFilterKernel(arg0, ptr1, (FILE*)ptr2);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_Initialize(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Initialize();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_ProcessEvents(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->ProcessEvents();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_AddEvent(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddEvent((const ::SiddhiGpu::CudaEvent*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_AddAndProcessEvents__Lorg_bytedeco_javacpp_PointerPointer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    void** ptr0 = arg0 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddAndProcessEvents((SiddhiGpu::CudaEvent**)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_AddAndProcessEvents__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddAndProcessEvents((arg0 == NULL ? NULL : &ptr0), arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    ptr0 -= position0;
    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_AddFilterToDevice(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Filter* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddFilterToDevice(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_CopyFiltersToDevice(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->CopyFiltersToDevice();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_GetElapsedTimeAverage(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaFilterKernel* ptr = (::SiddhiGpu::CudaFilterKernel*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->GetElapsedTimeAverage();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaFilterKernel_OnExit(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaFilterKernel::OnExit();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 21))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::MultipleFilterKernelInput* rptr = new ::SiddhiGpu::MultipleFilterKernelInput();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 21))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::MultipleFilterKernelInput* rptr = new ::SiddhiGpu::MultipleFilterKernelInput[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_ap_1Filters__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::Filter* rptr;
    rptr = ptr->ap_Filters;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 19);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_ap_1Filters__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Filter* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->ap_Filters = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_ap_1EventBuffer__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::CudaEvent* rptr;
    rptr = ptr->ap_EventBuffer;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 18);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_ap_1EventBuffer__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->ap_EventBuffer = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_i_1EventCount__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_EventCount = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_i_1EventCount__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_EventCount;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_i_1FilterCount__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_FilterCount = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_i_1FilterCount__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_FilterCount;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_i_1MaxEventCount__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_MaxEventCount;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024MultipleFilterKernelInput_i_1MaxEventCount__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::MultipleFilterKernelInput* ptr = (::SiddhiGpu::MultipleFilterKernelInput*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_MaxEventCount = arg0;
    return rarg;
}


JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_Initialize(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Initialize();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_ProcessEvents(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->ProcessEvents();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_AddEvent(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddEvent((const ::SiddhiGpu::CudaEvent*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_AddAndProcessEvents__Lorg_bytedeco_javacpp_PointerPointer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    void** ptr0 = arg0 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddAndProcessEvents((SiddhiGpu::CudaEvent**)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_AddAndProcessEvents__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddAndProcessEvents((arg0 == NULL ? NULL : &ptr0), arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    ptr0 -= position0;
    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_AddFilterToDevice(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Filter* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddFilterToDevice(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_CopyFiltersToDevice(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->CopyFiltersToDevice();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jfloat JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaKernelBase_GetElapsedTimeAverage(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaKernelBase* ptr = (::SiddhiGpu::CudaKernelBase*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->GetElapsedTimeAverage();
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_allocate(JNIEnv* env, jobject obj, jint arg0, jint arg1, jint arg2) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 22))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::GpuEventConsumer* rptr = new ::SiddhiGpu::GpuEventConsumer((SiddhiGpu::KernelType)arg0, arg1, arg2);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_PrintAverageStats(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->PrintAverageStats();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_GetMaxBufferSize(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->GetMaxBufferSize();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_OnEvents__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::CudaEvent* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->OnEvents((arg0 == NULL ? NULL : &ptr0), arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    ptr0 -= position0;
    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_OnEvents__Lorg_bytedeco_javacpp_PointerPointer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    void** ptr0 = arg0 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->OnEvents((SiddhiGpu::CudaEvent**)ptr0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_AddFilter(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Filter* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AddFilter(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_ConfigureFilters(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->ConfigureFilters();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_OnCudaEventMatch___3II(JNIEnv* env, jobject obj, jintArray arg0, jint arg1) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : env->GetIntArrayElements(arg0, NULL);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->OnCudaEventMatch(ptr0, arg1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (arg0 != NULL) env->ReleaseIntArrayElements(arg0, (jint*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_OnCudaEventMatch__Lorg_bytedeco_javacpp_IntPointer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->OnCudaEventMatch(ptr0, arg1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_OnCudaEventMatch__Ljava_nio_IntBuffer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg0);
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->OnCudaEventMatch(ptr0, arg1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_GetMatchingEvents(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    int* rptr;
    jthrowable exc = NULL;
    try {
        VectorAdapter< int > radapter(ptr->GetMatchingEvents());
        rptr = radapter;
        jint rcapacity = (jint)radapter.size;
        void (*deallocator)(void*) = &VectorAdapter< int >::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, deallocator);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024GpuEventConsumer_Initialize(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::GpuEventConsumer* ptr = (::SiddhiGpu::GpuEventConsumer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Initialize();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_Print__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Print((FILE*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_Print__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Print();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_allocate(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 19))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::Filter* rptr = new ::SiddhiGpu::Filter(arg0, arg1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_AddExecutorNode(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::ExecutorNode* ptr1 = arg1 == NULL ? NULL : (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return;
    }
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ptr->AddExecutorNode(arg0, *ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_Clone(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::Filter* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->Clone();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 19);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_i_1FilterId__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_FilterId = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_i_1FilterId__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_FilterId;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_ap_1ExecutorNodes__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::ExecutorNode* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->ap_ExecutorNodes = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_ap_1ExecutorNodes__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ExecutorNode* rptr;
    rptr = ptr->ap_ExecutorNodes;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 23);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_i_1NodeCount__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_NodeCount = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_i_1NodeCount__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_NodeCount;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Filter_Destroy(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Filter* ptr = (::SiddhiGpu::Filter*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Destroy();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_Print__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Print((FILE*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_Print__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Print();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 23))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::ExecutorNode* rptr = new ::SiddhiGpu::ExecutorNode();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 23))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::ExecutorNode* rptr = new ::SiddhiGpu::ExecutorNode[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_SetNodeType(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ExecutorNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetNodeType((SiddhiGpu::ExecutorNodeType)arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_SetConditionType(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ExecutorNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetConditionType((SiddhiGpu::ConditionType)arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_SetExpressionType(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ExecutorNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetExpressionType((SiddhiGpu::ExpressionType)arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_SetConstValue(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::ConstValue* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    ::SiddhiGpu::ExecutorNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetConstValue(*ptr0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_SetVariableValue(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::VariableValue* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    ::SiddhiGpu::ExecutorNode* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetVariableValue(*ptr0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_e_1NodeType__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->e_NodeType = (SiddhiGpu::ExecutorNodeType)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_e_1NodeType__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    SiddhiGpu::ExecutorNodeType rvalue = (SiddhiGpu::ExecutorNodeType)ptr->e_NodeType;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_e_1ConditionType__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    SiddhiGpu::ConditionType rvalue = (SiddhiGpu::ConditionType)ptr->e_ConditionType;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_e_1ConditionType__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->e_ConditionType = (SiddhiGpu::ConditionType)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_e_1ExpressionType__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->e_ExpressionType = (SiddhiGpu::ExpressionType)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_e_1ExpressionType__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    SiddhiGpu::ExpressionType rvalue = (SiddhiGpu::ExpressionType)ptr->e_ExpressionType;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_m_1ConstValue__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    rptr = &ptr->m_ConstValue;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 24);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_m_1ConstValue__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::ConstValue* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->m_ConstValue = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_m_1VarValue__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::VariableValue* rptr;
    rptr = &ptr->m_VarValue;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 25);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ExecutorNode_m_1VarValue__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ExecutorNode* ptr = (::SiddhiGpu::ExecutorNode*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::VariableValue* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->m_VarValue = *ptr0;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_Print__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Print();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_Print__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Print((FILE*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 24))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::ConstValue* rptr = new ::SiddhiGpu::ConstValue();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetFloat(JNIEnv* env, jobject obj, jfloat arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetFloat(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetDouble(JNIEnv* env, jobject obj, jdouble arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetDouble(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetString__Lorg_bytedeco_javacpp_BytePointer_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetString((const char*)ptr0, arg1);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetString__Ljava_lang_String_2I(JNIEnv* env, jobject obj, jstring arg0, jint arg1) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = arg0 == NULL ? NULL : env->GetStringUTFChars(arg0, NULL);
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetString(ptr0, arg1);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (arg0 != NULL) env->ReleaseStringUTFChars(arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 24))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::ConstValue* rptr = new ::SiddhiGpu::ConstValue[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetBool(JNIEnv* env, jobject obj, jboolean arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetBool((bool)arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetInt(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetInt(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_SetLong(JNIEnv* env, jobject obj, jlong arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::ConstValue* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->SetLong(arg0);
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 24);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_m_1Value__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Values* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->m_Value = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_m_1Value__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::Values* rptr;
    rptr = &ptr->m_Value;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 26);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_e_1Type__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->e_Type = (SiddhiGpu::DataType::Value)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024ConstValue_e_1Type__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::ConstValue* ptr = (::SiddhiGpu::ConstValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    SiddhiGpu::DataType::Value rvalue = (SiddhiGpu::DataType::Value)ptr->e_Type;
    rarg = (jint)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_Print__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::VariableValue* ptr = (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Print();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_Print__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::VariableValue* ptr = (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Print((FILE*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_allocate__II(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 25))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::VariableValue* rptr = new ::SiddhiGpu::VariableValue((SiddhiGpu::DataType::Value)arg0, arg1);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_allocate__(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 25))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::VariableValue* rptr = new ::SiddhiGpu::VariableValue();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 25))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::VariableValue* rptr = new ::SiddhiGpu::VariableValue[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_i_1AttributePosition__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::VariableValue* ptr = (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_AttributePosition;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_i_1AttributePosition__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::VariableValue* ptr = (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_AttributePosition = arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_e_1Type__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::VariableValue* ptr = (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->e_Type = (SiddhiGpu::DataType::Value)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024VariableValue_e_1Type__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::VariableValue* ptr = (::SiddhiGpu::VariableValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    SiddhiGpu::DataType::Value rvalue = (SiddhiGpu::DataType::Value)ptr->e_Type;
    rarg = (jint)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_Print__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Print((FILE*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_Print__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Print();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_allocate__(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 18))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaEvent* rptr = new ::SiddhiGpu::CudaEvent();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 18))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaEvent* rptr = new ::SiddhiGpu::CudaEvent((uint64_t)arg0);
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddIntAttribute(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->AddIntAttribute((unsigned int)arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddLongAttribute(JNIEnv* env, jobject obj, jint arg0, jlong arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->AddLongAttribute((unsigned int)arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddFloatAttribute(JNIEnv* env, jobject obj, jint arg0, jfloat arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->AddFloatAttribute((unsigned int)arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddDoubleAttribute(JNIEnv* env, jobject obj, jint arg0, jdouble arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->AddDoubleAttribute((unsigned int)arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddStringAttribute__ILjava_lang_String_2(JNIEnv* env, jobject obj, jint arg0, jstring arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr1 = arg1 == NULL ? NULL : env->GetStringUTFChars(arg1, NULL);
    jint size1 = 0;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->AddStringAttribute((unsigned int)arg0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (arg1 != NULL) env->ReleaseStringUTFChars(arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddStringAttribute__ILorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint size1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_limitFID);
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter adapter1(ptr1, size1);
    jthrowable exc = NULL;
    try {
        ptr->AddStringAttribute((unsigned int)arg0, (std::string&)adapter1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    signed char* rptr1 = adapter1;
    jint rsize1 = (jint)adapter1.size;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, &StringAdapter::deallocate);
    } else {
        env->SetIntField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetBoolAttribute(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rvalue = (bool)ptr->GetBoolAttribute((unsigned int)arg0);
        rarg = (jboolean)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetIntAttribute(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = ptr->GetIntAttribute((unsigned int)arg0);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetLongAttribute(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rvalue = ptr->GetLongAttribute((unsigned int)arg0);
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetFloatAttribute(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    jthrowable exc = NULL;
    try {
        float rvalue = ptr->GetFloatAttribute((unsigned int)arg0);
        rarg = (jfloat)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetDoubleAttribute(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jdouble rarg = 0;
    jthrowable exc = NULL;
    try {
        double rvalue = ptr->GetDoubleAttribute((unsigned int)arg0);
        rarg = (jdouble)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetStringAttribute(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->GetStringAttribute((unsigned int)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 4);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_ui_1Timestamp__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ui_Timestamp = (uint64_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_ui_1Timestamp__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    uint64_t rvalue = (uint64_t)ptr->ui_Timestamp;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 18))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::CudaEvent* rptr = new ::SiddhiGpu::CudaEvent[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_ui_1NumAttributes__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    unsigned int rvalue = (unsigned int)ptr->ui_NumAttributes;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_ui_1NumAttributes__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ui_NumAttributes = (unsigned int)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_a_1Attributes__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::AttibuteValue* rptr;
    rptr = &ptr->a_Attributes[arg0];
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 27);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_a_1Attributes__ILorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::AttibuteValue* ptr1 = arg1 == NULL ? NULL : (::SiddhiGpu::AttibuteValue*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jint position1 = arg1 == NULL ? 0 : env->GetIntField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    ptr->a_Attributes[arg0] = *ptr1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_a_1Attributes__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::AttibuteValue* rptr;
    rptr = ptr->a_Attributes;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 27);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_Destroy(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Destroy();
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_Reset(JNIEnv* env, jobject obj, jlong arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Reset((uint64_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_SetTimestamp(JNIEnv* env, jobject obj, jlong arg0) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->SetTimestamp((uint64_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetTimestamp(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        uint64_t rvalue = (uint64_t)ptr->GetTimestamp();
        rarg = (jlong)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_GetNumAttributes(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned int rvalue = (unsigned int)ptr->GetNumAttributes();
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024CudaEvent_AddBoolAttribute(JNIEnv* env, jobject obj, jint arg0, jboolean arg1) {
    ::SiddhiGpu::CudaEvent* ptr = (::SiddhiGpu::CudaEvent*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->AddBoolAttribute((unsigned int)arg0, (bool)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 27))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::AttibuteValue* rptr = new ::SiddhiGpu::AttibuteValue();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 27))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::AttibuteValue* rptr = new ::SiddhiGpu::AttibuteValue[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_m_1Value__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::AttibuteValue* ptr = (::SiddhiGpu::AttibuteValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::SiddhiGpu::Values* rptr;
    rptr = &ptr->m_Value;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 26);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_m_1Value__Lorg_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::AttibuteValue* ptr = (::SiddhiGpu::AttibuteValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    ::SiddhiGpu::Values* ptr0 = arg0 == NULL ? NULL : (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->m_Value = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_e_1Type__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::AttibuteValue* ptr = (::SiddhiGpu::AttibuteValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->e_Type = (SiddhiGpu::DataType::Value)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024AttibuteValue_e_1Type__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::AttibuteValue* ptr = (::SiddhiGpu::AttibuteValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    SiddhiGpu::DataType::Value rvalue = (SiddhiGpu::DataType::Value)ptr->e_Type;
    rarg = (jint)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 26))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::Values* rptr = new ::SiddhiGpu::Values();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 26))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::Values* rptr = new ::SiddhiGpu::Values[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_z_1ExtString__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint position0 = arg0 == NULL ? 0 : env->GetIntField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z_ExtString = (char*)ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_z_1ExtString__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)ptr->z_ExtString;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 4);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_b_1BoolVal__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rvalue = (bool)ptr->b_BoolVal;
    rarg = (jboolean)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_b_1BoolVal__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->b_BoolVal = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_i_1IntVal__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->i_IntVal = arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_i_1IntVal__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr->i_IntVal;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_l_1LongVal__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->l_LongVal = arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_l_1LongVal__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jlong rvalue = ptr->l_LongVal;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_f_1FloatVal__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    float rvalue = ptr->f_FloatVal;
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_f_1FloatVal__F(JNIEnv* env, jobject obj, jfloat arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->f_FloatVal = arg0;
    return rarg;
}
JNIEXPORT jdouble JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_d_1DoubleVal__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jdouble rarg = 0;
    double rvalue = ptr->d_DoubleVal;
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_d_1DoubleVal__D(JNIEnv* env, jobject obj, jdouble arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->d_DoubleVal = arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_z_1StringVal__(JNIEnv* env, jobject obj) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)ptr->z_StringVal;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 4);
        env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_z_1StringVal__IB(JNIEnv* env, jobject obj, jint arg0, jbyte arg1) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->z_StringVal[arg0] = (char)arg1;
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024Values_z_1StringVal__I(JNIEnv* env, jobject obj, jint arg0) {
    ::SiddhiGpu::Values* ptr = (::SiddhiGpu::Values*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 3), "This pointer address is NULL.");
        return 0;
    }
    jint position = env->GetIntField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    char rvalue = (char)ptr->z_StringVal[arg0];
    rarg = (jbyte)rvalue;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_allocate(JNIEnv* env, jobject obj) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 28))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::DataType* rptr = new ::SiddhiGpu::DataType();
        jint rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_allocateArray(JNIEnv* env, jobject obj, jint arg0) {
    if (!env->IsSameObject(env->GetObjectClass(obj), JavaCPP_getClass(env, 28))) {
        return;
    }
    jthrowable exc = NULL;
    try {
        ::SiddhiGpu::DataType* rptr = new ::SiddhiGpu::DataType[arg0];
        jint rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, &JavaCPP_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_00024DataType_GetTypeName(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)::SiddhiGpu::DataType::GetTypeName((SiddhiGpu::DataType::Value)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 4);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_GetConditionName(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)SiddhiGpu::GetConditionName((SiddhiGpu::ConditionType)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 4);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_GetExpressionTypeName(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)SiddhiGpu::GetExpressionTypeName((SiddhiGpu::ExpressionType)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 4);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_wso2_siddhi_gpu_jni_SiddhiGpu_GetNodeTypeName(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)SiddhiGpu::GetNodeTypeName((SiddhiGpu::ExecutorNodeType)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 4);
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 16);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

}

